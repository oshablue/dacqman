{


  "textInputs": [

    {
      "label": "Set Tx Channel",
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x50",
        "positionToReplaceWithTextInputBaseZero": "10"
      },
      "description": "Set Tx (or Pulse) channel.  The value in the text input box should be a 1-byte integer, and it will be passed as parameter 1 in the command."
    },

    {
      "label": "Set Rx Gain",
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x50",
        "positionToReplaceWithTextInputBaseZero": "10"
      },
      "description": "Set Rx gain value.  The value in the text input box should be a 1-byte integer, and it will be passed as parameter 1 in the command."
    }

  ],






  "buttons": [

    {
      "title": "Set Tx Voltage via DAC Output to 0x00 (zero-est)",
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x50"
      },
      "description": "Set Tx or Pulse voltage via the DAC output to near-est possible zero.",
      "returnDataTo" : "chart"
    },


    {
      "title": "Set Tx Voltage via DAC Output to 0x05 (Med)",
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x50"
      },
      "description": "Set Tx or Pulse voltage via the DAC output to around middle range when using a -200VDC module with source VDD of 3.3VDC rail.",
      "returnDataTo" : "chart"
    },



    {
      "title": "Set Tx Voltage via DAC Output to 0x0f (Nominal Normal)",
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x0f, 0x00, 0x00, 0x50"
      },
      "description": "Set Tx or Pulse voltage via the DAC output to around designated nominal range when using a -200VDC module with source VDD of 3.3VDC rail.",
      "returnDataTo" : "chart"
    },








    {
      "title": "Set Tx Channel 1",
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x50"
      },
      "description": "Set Tx channel to 1",
      "returnDataTo" : "chart"
    },

    {
      "title": "Set Tx Channel 2",
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x50"
      },
      "description": "Set Tx channel to 1",
      "returnDataTo" : "chart"
    },







    {
      "title": "Set Rx Channel 1",
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x50"
      },
      "description": "Set Rx channel to 1 (parameter1 = 0x01 - firmware handles the base 0x00 = Ch 1 part)",
      "returnDataTo" : "chart"
    },


    {
      "title": "Set Rx Channel 2",
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x50"
      },
      "description": "Set Rx channel to 2 (parameter = 0x02 - firmware handles the base 0x00 = Ch 1 part",
      "returnDataTo" : "chart"
    },


    {
      "title": "Set Rx Gain to 0 (Min)",
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x50"
      },
      "description": "Set Rx Gain to 0, the minimum",
      "returnDataTo" : "chart"
    },


    {
      "title": "Set Rx Gain to 0x0F (Max)",
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00, 0x02, 0x00, 0x0F, 0x00, 0x00, 0x50"
      },
      "description": "Set Rx Gain to 0x0F, the maximum",
      "returnDataTo" : "chart"
    },








      {
        "title": "Set PAQ Mode Single and Get a PAQ WF",
        "command": {
          "type": "hexCsvBytes",
          "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x50"
        },
        "description": "Set PAQ mode to single pulse and acquire",
        "returnDataTo" : "chart"
      },


      {
        "title": "Set PAQ Mode Continuous",
        "command": {
          "type": "hexCsvBytes",
          "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x50"
        },
        "description": "Set PAQ mode to continuous acquisition",
        "returnDataTo" : "chart"
      },


      {
        "title": "Set PAQ Mode Continuous Channel Scan",
        "command": {
          "type": "hexCsvBytes",
          "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x50"
        },
        "description": "Set PAQ mode to continuous acquisition while channel-change scanning all channels",
        "returnDataTo" : "chart"
      },








    {
      "title": "Basic CH 1 Cont PAQ Setup Chain",
      "command": {
        "type": "hexCsvBytesChained",
        "chainedCmdDelayMs" : "1500",
        "chainedCmdTimeoutMs" : "1000",
        "chainedCmdCompleteChar" : "0x0D",
        "value": [
          "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x50",
          "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x50",
          "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x50",
          "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x0f, 0x00, 0x00, 0x50",
          "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x50"
        ],
        "description-summary" : "Command chain/sequence as implemented in UT software style Send Settings and PAC, without pulse shaping and duration controls.",
        "description-detail" : [
          "1. Set Rx Ch 1",
          "2. Set Tx Ch 1",
          "3. Set Rx Gain 0x00",
          "4. Set HIVDC Tx voltage to nominal",
          "5. Start continuous PAQ"
        ]
      },
      "description": "Pulse and Acquire setting the Tx and Rx channels, and the Tx and Rx gains, oh and Rx delay too",
      "returnDataTo" : "chart"
    },

    {
      "title": "Basic CH 2 Cont PAQ Setup Chain",
      "command": {
        "type": "hexCsvBytesChained",
        "chainedCmdDelayMs" : "1500",
        "chainedCmdTimeoutMs" : "1000",
        "chainedCmdCompleteChar" : "0x0D",
        "value": [
          "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x50",
          "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x50",
          "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x50",
          "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x0f, 0x00, 0x00, 0x50",
          "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x50"
        ],
        "description-summary" : "Command chain/sequence as implemented in UT software style Send Settings and PAC, without pulse shaping and duration controls.",
        "description-detail" : [
          "1. Set Rx Ch 1",
          "2. Set Tx Ch 1",
          "3. Set Rx Gain 0x00",
          "4. Set HIVDC Tx voltage to nominal",
          "5. Start continuous PAQ"
        ]
      },
      "description": "Pulse and Acquire setting the Tx and Rx channels, and the Tx and Rx gains, oh and Rx delay too",
      "returnDataTo" : "chart"
    }


  ]
}
