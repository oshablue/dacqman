{


  "sectionTitles" : {
    
    "textInputsTitle" : "RS104 or RS8 (HDL Series) Controls"

  },


  "textInputs": [

    {
      "label": "Tx Channel",
      "min" : 1,
      "max" : 8,
      "default" : 1,
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x50",
        "positionToReplaceWithTextInputBaseZero": "10"
      },
      "description": "Set Tx (or Pulse) channel.  The value in the text input box should be a 1-byte integer, and it will be passed as parameter 1 in the command.",
      "class" : "onlyAppliesToSingleChannelDaq"
    },

    {
      "label": "Tx Voltage",
      "min" : 0,
      "max" : 31,
      "default" : 0,
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x50",
        "positionToReplaceWithTextInputBaseZero": "10"
      },
      "description": "Set Tx (Pulse) voltage value.  0x00 - 0x1f.  BE CAREFUL.  The value in the text input box should be a 1-byte integer, and it will be passed as parameter 1 in the command."
    },

    {
      "label": "Rx Channel",
      "min" : 1,
      "max" : 8,
      "default" : 1,
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x50",
        "positionToReplaceWithTextInputBaseZero": "10"
      },
      "description": "Set Rx channel.  The value in the text input box should be a 1-byte integer, and it will be passed as parameter 1 in the command.",
      "class" : "onlyAppliesToSingleChannelDaq"
    },

    {
      "label": "Rx Gain",
      "min" : 0,
      "max" : 15,
      "default" : 0,
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x50",
        "positionToReplaceWithTextInputBaseZero": "10"
      },
      "description": "Set Rx gain value.  0x00 - 0x0f.  The value in the text input box should be a 1-byte integer, and it will be passed as parameter 1 in the command."
    },

    {
      "label": "Rx Delay",
      "min" : 0,
      "max" : 3,
      "default" : 0,
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x50",
        "positionToReplaceWithTextInputBaseZero": "10"
      },
      "description": "Set Rx Delay in 30 microseconds.  0x00 - 0x03.  0x00 is about an rx delay, as of this writing, of 2x 80MHz clocks.  For each additional +1, add 30 microseconds.  The maximum value corresponds to a delay of about 90 microseconds."
    }


  ],



  "controlGroups" : [

{

  "name" : "PAQ Mode (RS104)",

  "buttons" : [

      {
        "title": "Set PAQ Mode Single and Get a PAQ WF",
        "command": {
          "type": "hexCsvBytes",
          "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x50"
        },
        "description": "Set PAQ mode to single pulse and acquire",
        "returnDataTo" : "chart",
        "options" : [
          {
            "key" : "singleCaptureBuffer",
            "value" : "true"
          }
        ]
      },


      {
        "title": "Set PAQ Mode Continuous",
        "command": {
          "type": "hexCsvBytes",
          "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x50"
        },
        "description": "Set PAQ mode to continuous acquisition",
        "returnDataTo" : "chart",
        "options" : [
          {
            "key" : "captureBufferMultiple",
            "value" : 3
          }
        ]
      },


      {
        "title": "Set PAQ Mode Continuous Channel Scan",
        "command": {
          "type": "hexCsvBytes",
          "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x50"
        },
        "description": "Set PAQ mode to continuous acquisition while channel-change scanning all channels",
        "returnDataTo" : "multiChart",
        "options" : [
          {
            "key" : "captureBufferMultiple",
            "value" : 9
          }
        ]
      }
    ]
  }

  ],


  "uiDataCaptureFocused" : [

    {
      "title": "Acquire Channel Scans To Split Batch Custom Files",
      "mapToButtonId" : "btnCaptureStartDummyForTimedSeries",
      "command": {
        "type": "hexCsvBytesChained",
        "chainedCmdDelayMs" : "120000",
        "chainedCmdTimeoutMs" : "1000",
        "chainedCmdCompleteChar" : "",
        "value": [
          "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x50",
          "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x50"
        ],
        "description-summary" : "Command chain/sequence to set PAQ to continuous channel scan and stop on cancel click. You will need to set the Tx voltage and Rx gain separately.",
        "description-detail" : [
          "0. Please set up Tx and Rx voltage/gain prior.",
          "1. Start continuous channel scanning.",
          "???2. Stop continuous scan and switch back to single/manual acquisition mode."
        ],
        "comments" : {
          "0" : "this is copied from the previous chained commands section as a template - same format is used to populate this ui customization",
          "1" : "chainedCmdDelayMs will be overridden for file writing purposes by a duration for each file based on capture options file specified scans per file and the waveform parser file specified waveform receive rate for the hardware.",
          "2" : "however, the second command will still fire, so if that second command tells the hardware to stop streaming, that'll happen. "
        }
      },
      "description": "Scan defined channels continuously until stop/cancel and split up into batch files using custom capture options.",
      "returnDataTo" : "multiChart",
      "options" : [
        {
          "key" : "fileCaptureCustomToDirectory",
          "value" : "true"
        },
        {
          "key" : "captureBufferMultiple",
          "value" : 8,
          "notes" : [
            "This defines chunk size multiple, the number of waveform-lengths, nominally, to include in the buffer readable event for the read stream buffer in the main window graph demo code.",
            "It is also used in the data capture and user interface demo code to determine how much to decimate the UI data that gets pushed to the graph(s) to reduce UI overhead and prevent buffer processing overflows for display purposes.",
            "That is, if too much data is pushed to the graph continuously, the graphable data buffer processing will fall behind and the buffer will continue to grow, basically towards overflowing, slowing the system down, or eating up memory.",
            "In the UI code, for data focused capture, a value of 15 for example, might mean that every 16th waveform is pushed to its corresponding channel number graph.",
            "Thus, at 128 waveforms per second spread through 8 channels, only graphing 4 of the 8 channels (a separate configuration to mimic legacy 4-channel systems for customization request by user),",
            "every 128/16 = 8th waveform per second is pushed to a chart, and since there are 8 real channels, only 4 of which get graphed per this particular use case,",
            "there is one waveform update to graph per channel per second."
            ]
        },
        {
          "key" : "captureSizeNumberOfWaveformsPerFile",
          "value" : {
            "number" : 600,
            "note" : "600 is 150 scans X 4 channels - eg per sample UTR type output file from specific user demo"
          }
        }
      ]
    },


    {
      "title": "Set PAQ Mode Continuous Channel Scan",
      "mapToButtonId" : "btnCaptureStart",
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x50"
      },
      "description": "Scan defined channels continuously until stop/cancel and split up into batch files using custom capture options.",
      "returnDataTo" : "multiChart",
      "options" : [
        {
          "key" : "fileCaptureCustomToDirectory",
          "value" : "true"
        },
        {
          "key" : "captureBufferMultiple",
          "value" : 8,
          "notes" : [
            "This defines chunk size multiple, the number of waveform-lengths, nominally, to include in the buffer readable event for the read stream buffer in the main window graph demo code.",
            "It is also used in the data capture and user interface demo code to determine how much to decimate the UI data that gets pushed to the graph(s) to reduce UI overhead and prevent buffer processing overflows for display purposes.",
            "That is, if too much data is pushed to the graph continuously, the graphable data buffer processing will fall behind and the buffer will continue to grow, basically towards overflowing, slowing the system down, or eating up memory.",
            "In the UI code, for data focused capture, a value of 15 for example, might mean that every 16th waveform is pushed to its corresponding channel number graph.",
            "Thus, at 128 waveforms per second spread through 8 channels, only graphing 4 of the 8 channels (a separate configuration to mimic legacy 4-channel systems for customization request by user),",
            "every 128/16 = 8th waveform per second is pushed to a chart, and since there are 8 real channels, only 4 of which get graphed per this particular use case,",
            "there is one waveform update to graph per channel per second."
            ]
        },
        {
          "key" : "captureSizeNumberOfWaveformsPerFile",
          "value" : {
            "number" : 600,
            "note" : "600 is 150 scans X 4 channels - eg per sample UTR type output file from specific user demo"
          }
        }
      ]
    },


    {
      "title": "Set PAQ Mode (Back to) Single (Not continuous)",
      "mapToButtonId" : "btnCaptureStop",
      "command": {
        "type": "hexCsvBytes",
        "value": "0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x50"
      },
      "description": "Set PAQ mode to single pulse and acquire",
      "returnDataTo" : "chart",
      "options" : [
        {
          "key" : "singleCaptureBuffer",
          "value" : "true"
        }
      ],
      "comments" : {
        "0" : "This is copied from the basic buttons section as a template for ui customization application"
      }
    }



  ]

}




